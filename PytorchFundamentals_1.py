import torch
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
#print(torch.__version__)

#tensors are the building components in torch--numeric data representation

#scalar object initalized
scalar = torch.tensor(7)
print(scalar)

#dimension of object
dim = scalar.ndim
print("dimension: ", dim)

#retrieve delcared that is set to tensor
print("value of item: ", scalar.item())

#Vector type
vector = torch.tensor([7, 7])
print(vector, "dimension of scalar ", vector.ndim)

#Access the structure of the tensor thru shape attribute
shape = vector.shape
print("Shape of the tensor is ", shape)

#Tensor ---> Matrix type now
MATRIX = torch.tensor([[7, 8], 
                       [9, 10]])
print(MATRIX, "shape of matrix ", MATRIX.shape)

# Tensor (anything more than 2 dim or matrix); technically vectors & matrices are tensors--larger pic
TENSOR = torch.tensor([[[1, 2, 3],
                        [3, 6, 9],
                        [2, 4, 5]]])
print(TENSOR, "shape of tensor ", TENSOR.shape)

"""
A ML model uses random nums generated by tensors, and then fine-tunes/manipulates them thru ml algorithms
"""


#random_image_size_tensor = torch.rand(size=(224, 224, 3))

#torch.zeros or torch.ones makes the whole tensor full of that num itself, inside the args you can 
#refer to the dimensions of the tensor itself

#this method allows us to use the range feature (works exactly like the args in a for loop)

seqTorch = torch.arange(start=0, end=10, step=2)
print("Sequential tensor: ", seqTorch)

#to want a tensor like another, you can use 'torch.zeroes_like(input=) or torch.ones_like(input=)' where the args will be
#the tensor you want it like